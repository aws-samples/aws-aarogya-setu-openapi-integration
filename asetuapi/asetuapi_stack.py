from aws_cdk import (
    core,
    aws_lambda as _lambda,
    aws_apigateway as apigw,
    aws_dynamodb as ddb,
    aws_sqs as sqs,
    aws_lambda_event_sources as events,
    aws_cognito as cognito,
    aws_ssm as ssm,
)


API_NAME = "asetuapipoc"


class AsetuapiStack(core.Stack):
    def __init__(self, scope: core.Construct, id: str, **kwargs) -> None:
        super().__init__(scope, id, **kwargs)

        # store secrets in parameter store
        jwt_secret = ssm.StringParameter(
            self,
            "ApiJwtSecret",
            string_value="somethinghere",
            description="Secret key OpenAPI uses to sign response",
            parameter_name="JWT_SECRET",
            simple_name=True,
        )
        api_key = ssm.StringParameter(
            self,
            "ApiKeySecret",
            string_value="vEu6L4Q2Ne9JSDiWnT5lFaFcoxPsqhUr1ACtq7st",
            description="Unique API key generated by OpenAPI for account",
            parameter_name="API_KEY",
            simple_name=True,
        )
        username = ssm.StringParameter(
            self,
            "UserNameSecret",
            string_value="chirgs@amazon.com",
            description="Name used to create OpenAPI account",
            parameter_name="USERNAME",
            simple_name=True,
        )
        password = ssm.StringParameter(
            self,
            "PasswordSecret",
            string_value="COVID##Tracker1@3",
            description="Password used to create account",
            parameter_name="PASSWORD",
            simple_name=True,
        )

        # create auth
        user_pool = cognito.UserPool(
            self,
            "AppUserPool",
            self_sign_up_enabled=True,
            account_recovery=cognito.AccountRecovery.PHONE_AND_EMAIL,
            user_verification=cognito.VerificationEmailStyle.CODE,
            auto_verify={"email": True},
            standard_attributes={"email": {"required": True, "mutable": True}},
        )

        user_pool_client = cognito.UserPoolClient(
            self, "UserPoolClient", user_pool=user_pool
        )

        # Create storage and queue
        bulk_request_queue = sqs.Queue(
            self,
            "BulkRequestQueue",
        )

        user_status_table = ddb.Table(
            self,
            "UserStatusTable",
            partition_key={"name": "mobile_number", "type": ddb.AttributeType.STRING},
            time_to_live_attribute="expdate",
        )
        self._user_status_table = user_status_table

        requests_table = ddb.Table(
            self,
            "RequestsTable",
            partition_key={"name": "mobile_number", "type": ddb.AttributeType.STRING},
            time_to_live_attribute="expdate",
        )

        # Create Lambda functions
        single_request = _lambda.Function(
            self,
            "SingleRequesetHandler",
            runtime=_lambda.Runtime.PYTHON_3_7,
            code=_lambda.Code.asset("lambda"),
            handler="single_request.handler",
            timeout=core.Duration.seconds(10),
            environment={
                "USER_STATUS_TABLE": user_status_table.table_name,
                "REQUESTS_TABLE": requests_table.table_name,
                "JWT_KEY": jwt_secret.parameter_name,
                "API_KEY_KEY": api_key.parameter_name,
                "USERNAME_KEY": username.parameter_name,
                "PASSWORD_KEY": password.parameter_name,
            },
        )

        # give lambda access permissions to ddb tables
        user_status_table.grant_read_write_data(single_request)
        requests_table.grant_read_write_data(single_request)
        jwt_secret.grant_read(single_request)
        api_key.grant_read(single_request)
        username.grant_read(single_request)
        password.grant_read(single_request)

        bulk_request = _lambda.Function(
            self,
            "BulkRequestHandler",
            runtime=_lambda.Runtime.PYTHON_3_7,
            code=_lambda.Code.asset("lambda"),
            handler="bulk_request.handler",
            timeout=core.Duration.seconds(30),
            environment={
                "QUEUE_URL": bulk_request_queue.queue_url,
            },
        )

        # give lambda access to write to queue
        bulk_request_queue.grant_send_messages(bulk_request)

        queue_receiver = _lambda.Function(
            self,
            "QueueReceiverHandler",
            runtime=_lambda.Runtime.PYTHON_3_7,
            code=_lambda.Code.asset("lambda"),
            handler="queue_receiver.handler",
            timeout=core.Duration.seconds(30),
            environment={
                "USER_STATUS_TABLE": user_status_table.table_name,
                "REQUESTS_TABLE": requests_table.table_name,
                "QUEUE_URL": bulk_request_queue.queue_url,
                "JWT_KEY": jwt_secret.parameter_name,
                "API_KEY_KEY": api_key.parameter_name,
                "USERNAME_KEY": username.parameter_name,
                "PASSWORD_KEY": password.parameter_name,
            },
        )

        # lambda gets triggered by sqs queue and writes to both tables
        queue_receiver.add_event_source(
            events.SqsEventSource(bulk_request_queue, batch_size=1)
        )
        bulk_request_queue.grant_consume_messages(queue_receiver)
        user_status_table.grant_read_write_data(queue_receiver)
        requests_table.grant_read_write_data(queue_receiver)
        jwt_secret.grant_read(bulk_request)
        api_key.grant_read(bulk_request)
        username.grant_read(bulk_request)
        password.grant_read(bulk_request)

        # create api endpoints with authorization
        api = apigw.RestApi(
            self,
            "ASetuApiGateway",
            rest_api_name=API_NAME,
            default_cors_preflight_options=apigw.CorsOptions(
                allow_origins=apigw.Cors.ALL_ORIGINS
            ),
        )
        auth = apigw.CfnAuthorizer(
            self,
            "ApiCognitoAuthorizer",
            name="CognitoAuthorizer",
            type="COGNITO_USER_POOLS",
            authorizer_result_ttl_in_seconds=300,
            identity_source="method.request.header.Authorization",
            rest_api_id=api.rest_api_id,
            provider_arns=[user_pool.user_pool_arn],
        )

        # Solution from: https://github.com/aws/aws-cdk/issues/9023#issuecomment-658309644
        # Override authorizer to use COGNITO
        single_request_integration = apigw.LambdaIntegration(single_request, proxy=True)
        single_request_resource = api.root.add_resource("status")
        single_method = single_request_resource.add_method(
            "POST",
            single_request_integration,
            api_key_required=False,
            authorizer=auth,
            authorization_type=apigw.AuthorizationType.COGNITO,
        )
        single_method.node.find_child("Resource").add_property_override(
            "AuthorizationType", "COGNITO_USER_POOLS"
        )
        single_method.node.find_child("Resource").add_property_override(
            "AuthorizerId", {"Ref": auth.logical_id}
        )

        bulk_request_integration = apigw.LambdaIntegration(bulk_request, proxy=True)
        bulk_request_resource = api.root.add_resource("bulk_status")
        bulk_method = bulk_request_resource.add_method(
            "POST",
            bulk_request_integration,
            api_key_required=False,
            authorizer=auth,
            authorization_type=apigw.AuthorizationType.COGNITO,
        )
        bulk_method.node.find_child("Resource").add_property_override(
            "AuthorizationType", "COGNITO_USER_POOLS"
        )
        bulk_method.node.find_child("Resource").add_property_override(
            "AuthorizerId", {"Ref": auth.logical_id}
        )

        core.CfnOutput(
            self,
            "user-pool-id",
            value=user_pool.user_pool_id,
            export_name="user-pool-id",
        )
        core.CfnOutput(
            self,
            "user-pool-web-client",
            value=user_pool_client.user_pool_client_id,
            export_name="user-pool-web-client",
        )
        core.CfnOutput(self, "api-name", value=API_NAME, export_name="api-name")
        core.CfnOutput(
            self, "api-endpoint-url", value=api.url, export_name="api-endpoint-url"
        )
        core.CfnOutput(
            self,
            "deployment-region",
            value=self.region,
            export_name="deployment-region",
        )
        core.CfnOutput(
            self, "stack-name", value=self.stack_name, export_name="stack-name"
        )

    @property
    def display_table(self) -> ddb.Table:
        return self._user_status_table
